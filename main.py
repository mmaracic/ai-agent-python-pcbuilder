import logging
import os
from typing import Annotated, Optional

from fastapi import FastAPI, Request
from fastapi.params import Body, Depends
from langchain.chat_models.base import BaseChatModel
from langchain_openai import ChatOpenAI
from pydantic import SecretStr

# Constants
OPEN_ROUTER_API_KEY = "OPEN_ROUTER_API_KEY"
OPEN_ROUTER_API_KEY_ERROR = "OPEN_ROUTER_API_KEY environment variable is not set"

class AppState:
    """
    Holds application-wide state, such as the chat model instance.
    """
    def __init__(self):
        self.model: Optional[BaseChatModel] = None


app = FastAPI()
app.state.app_state = AppState()
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def get_state(request: Request) -> AppState:
    """
    Retrieves the application state from the request.

    Returns:
        AppState: The current application state.
    """
    return request.app.state.app_state

@app.get("/setup")
def setup():
    """
    Initializes the FastAPI application by checking for the required
    environment variable and setting up the chat model.
    Raises:
        ValueError: If the OPENAI_API_KEY environment variable is not set.
    """
    logger.info("Initializing FastAPI application")
    if not os.environ.get(OPEN_ROUTER_API_KEY):
        logger.error(OPEN_ROUTER_API_KEY_ERROR)
        raise ValueError(OPEN_ROUTER_API_KEY_ERROR)
    app.state.app_state.model = ChatOpenAI(
        model="mistralai/mistral-small-3.2-24b-instruct:free",
        api_key=SecretStr(os.environ[OPEN_ROUTER_API_KEY]),
        base_url="https://openrouter.ai/api/v1",
        default_headers={"HTTP-Referer": "https://mysite", "X-Title": "My App"},
    )
    logger.info("FastAPI application initialized successfully")

@app.post("/query")
def query(text: Annotated[str, Body(media_type="text/plain")], state: Annotated[AppState, Depends(get_state)]):
    """
    Handles POST requests to the '/query' endpoint.

    Args:
        request (Request): The incoming HTTP request object.
        text (str): The text provided in the request body.

    Returns:
        dict: A dictionary containing the response from the model.

    Logs:
        - The received query.
        - The response generated by the model.
    """
    if not state.model:
        logger.error("Model is not initialized. Please call /setup first.")
        return {"response": "Model is not initialized. Please call /setup first."}
    logger.info("Received query: %s", text)
    response = state.model.invoke(text)
    logger.info("Response: %s", response.content)
    return {"response": response.content}
